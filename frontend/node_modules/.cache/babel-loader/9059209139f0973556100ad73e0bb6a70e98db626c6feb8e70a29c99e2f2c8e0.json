{"ast":null,"code":"const express = require('express');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst {\n  Pool\n} = require('pg');\nconst app = express();\nconst port = 5000;\n\n// Database Connection\nconst pool = new Pool({\n  connectionString: 'postgresql://MainProject_owner:Q89rbOjImFDi@ep-rough-water-a5q7g77n.us-east-2.aws.neon.tech/MainProject?sslmode=require'\n});\n\n// Middleware\napp.use(cors());\napp.use(bodyParser.json());\n\n// API Endpoint\napp.post('/api/crop-prediction', async (req, res) => {\n  const {\n    nitrogen,\n    phosphorous,\n    potassium,\n    temperature,\n    humidity,\n    ph,\n    rainfall,\n    location\n  } = req.body;\n  try {\n    await pool.query('INSERT INTO crop_data (nitrogen, phosphorous, potassium, temperature, humidity, ph, rainfall, location) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)', [nitrogen, phosphorous, potassium, temperature, humidity, ph, rainfall, location]);\n    res.status(200).json({\n      message: 'Data inserted successfully!'\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      message: 'Error inserting data.'\n    });\n  }\n});\n\n// Start Server\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","bodyParser","cors","Pool","app","port","pool","connectionString","use","json","post","req","res","nitrogen","phosphorous","potassium","temperature","humidity","ph","rainfall","location","body","query","status","message","error","console","listen","log"],"sources":["C:/Users/annma/FARMOS/frontend/src/components/Assets/Signup/index.js"],"sourcesContent":["const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst cors = require('cors');\r\nconst { Pool } = require('pg');\r\n\r\nconst app = express();\r\nconst port = 5000;\r\n\r\n// Database Connection\r\nconst pool = new Pool({\r\n    connectionString: 'postgresql://MainProject_owner:Q89rbOjImFDi@ep-rough-water-a5q7g77n.us-east-2.aws.neon.tech/MainProject?sslmode=require',\r\n});\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n// API Endpoint\r\napp.post('/api/crop-prediction', async (req, res) => {\r\n    const { nitrogen, phosphorous, potassium, temperature, humidity, ph, rainfall, location } = req.body;\r\n\r\n    try {\r\n        await pool.query(\r\n            'INSERT INTO crop_data (nitrogen, phosphorous, potassium, temperature, humidity, ph, rainfall, location) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)',\r\n            [nitrogen, phosphorous, potassium, temperature, humidity, ph, rainfall, location]\r\n        );\r\n        res.status(200).json({ message: 'Data inserted successfully!' });\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: 'Error inserting data.' });\r\n    }\r\n});\r\n\r\n// Start Server\r\napp.listen(port, () => {\r\n    console.log(`Server running on http://localhost:${port}`);\r\n});"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAM;EAAEG;AAAK,CAAC,GAAGH,OAAO,CAAC,IAAI,CAAC;AAE9B,MAAMI,GAAG,GAAGL,OAAO,CAAC,CAAC;AACrB,MAAMM,IAAI,GAAG,IAAI;;AAEjB;AACA,MAAMC,IAAI,GAAG,IAAIH,IAAI,CAAC;EAClBI,gBAAgB,EAAE;AACtB,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,GAAG,CAACN,IAAI,CAAC,CAAC,CAAC;AACfE,GAAG,CAACI,GAAG,CAACP,UAAU,CAACQ,IAAI,CAAC,CAAC,CAAC;;AAE1B;AACAL,GAAG,CAACM,IAAI,CAAC,sBAAsB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACjD,MAAM;IAAEC,QAAQ;IAAEC,WAAW;IAAEC,SAAS;IAAEC,WAAW;IAAEC,QAAQ;IAAEC,EAAE;IAAEC,QAAQ;IAAEC;EAAS,CAAC,GAAGT,GAAG,CAACU,IAAI;EAEpG,IAAI;IACA,MAAMf,IAAI,CAACgB,KAAK,CACZ,iJAAiJ,EACjJ,CAACT,QAAQ,EAAEC,WAAW,EAAEC,SAAS,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,EAAE,EAAEC,QAAQ,EAAEC,QAAQ,CACpF,CAAC;IACDR,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACd,IAAI,CAAC;MAAEe,OAAO,EAAE;IAA8B,CAAC,CAAC;EACpE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpBb,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACd,IAAI,CAAC;MAAEe,OAAO,EAAE;IAAwB,CAAC,CAAC;EAC9D;AACJ,CAAC,CAAC;;AAEF;AACApB,GAAG,CAACuB,MAAM,CAACtB,IAAI,EAAE,MAAM;EACnBqB,OAAO,CAACE,GAAG,CAAC,sCAAsCvB,IAAI,EAAE,CAAC;AAC7D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}